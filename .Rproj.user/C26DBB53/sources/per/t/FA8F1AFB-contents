library(shiny)
library(readxl)
library(shinythemes)
library(dplyr)


b_plan<- read_excel("B_plan_data.xlsx")%>%
    mutate(Amount = round(Amount, 0))%>%
    as.data.frame()
rownames(b_plan) <- b_plan$Variable
b_plan[1] <- NULL

CEO_price <- 2.58
procurement_price <- 2.74
distribution_price <- 3.98

PMI_distrib <- 0.29
lost_vect <- 0.123
usage_vect <- 0.4308
insecticide_eff_vect <- 0.0291
wear_tear_vect <- 0.0276


# Define UI for dataset viewer app ----
ui <- fluidPage(
    theme = shinythemes::shinytheme("flatly"),

    
    # App title ----
    titlePanel("Business Plan"),
    
    # Sidebar layout with input and output definitions ----
    sidebarLayout(
        
        # Sidebar panel for inputs ----
        sidebarPanel(
            
            # Input: Select a where the % of cost of distrib of total budget comes from ----
            selectInput("distrib", "Cost of distribution %",
                        choices = c("PMI", "GF", "AMF", "Other"),
                        selected = "PMI"),
            
            uiOutput("other_distrib"),
            
            #--------------------------------------------
            
            selectInput("price", "Price",
                        choices = c("CEO", "MOP procurement", 
                                    "MOP procurement and distribution"),
                        selected = "CEO"),
            
            #-------------------------------------------
            selectInput("LLIN_lost", "LLIN lost %",
                        choices = c("Vectorworks", "Other"),
                        selected = "Vectorworks"),
            
           
            uiOutput("other_lost"),
            
            #-------------------------------------------
            
            selectInput("not_used", "Not used every night %",
                        choices = c("Vectorworks", "Other"),
                        selected = "Vectorworks"),
            
            uiOutput("other_not_used"),
            #-------------------------------------------
            
            selectInput("insecticide_efficacy", "Min. insecticide efficacy %",
                        choices = c("Vectorworks", "Other"),
                        selected = "Vectorworks"),
            
            uiOutput("other_insecticide"),
            
            #-------------------------------------------
            selectInput("wear_tear", "Wear and tear %",
                        choices = c("Vectorworks", "Other"),
                        selected = "Vectorworks"),
            
            uiOutput("other_wear_tear"),
            
            #-------------------------------------------
            numericInput("improvement", "Loss reduction by %:", 10),
            
            # Include clarifying text ----
            helpText("Note: Please specify the parameters you wish to display"),
            
            
            
        ),
        
        # Main panel for displaying outputs ----
        mainPanel(
            tabsetPanel(
                tabPanel("Tab 1",
                         h4("Chosen values"),
                         verbatimTextOutput("summary"),
                         
                         h4("Data"),
                         tableOutput("Bplan")
                    
                         ),
                
                tabPanel("Tab 2", h4("Graphs"))
                )
            
                
        
    
           
        )
        
    )
)

# Define server logic to summarize and view selected dataset ----
server <- function(input, output) {
    
    
   
        output$other_distrib <- renderUI({
            if(input$distrib == "Other"){
            numericInput("dist_other", "If other, please specify:", 0)
            }
            else{
                return(NULL)
            }
            
        })
        
        
        output$other_lost <- renderUI({
            if(input$LLIN_lost == "Other"){
                numericInput("lost_other", "If other, please specify:", 0)
            }
            else{
                return(NULL)
            }
        })
        
        output$other_not_used <- renderUI({
            if(input$not_used == "Other"){
                numericInput("not_used_other", "If other, please specify:", 0)
            }
            else{
                return(NULL)
            }
        })
        
        output$other_insecticide <- renderUI({
            if(input$insecticide_efficacy == "Other"){
                numericInput("insecticide_other", "If other, please specify:", 0)
            }
            else{
                return(NULL)
            }
        })
        
        output$other_wear_tear <- renderUI({
            if(input$wear_tear == "Other"){
                numericInput("wear_tear_other", "If other, please specify:", 0)
            }
            else{
                return(NULL)
            }
        })
    
      
    
    
    # Return the requested dataset ----
        
       
        
        distribInput <- reactive({
            if(input$distrib != "Other"){
                switch(input$distrib,
                       "PMI" = 0.29,
                       "GF" = GF,
                       "AMF" = AMF)
                
            }
            else{
                input$dist_other 
            }
        })
        #-----------------------------------
        
        priceInput <- reactive({
            switch(input$price,
                   "CEO" = CEO_price,
                   "MOP procurement" = procurement_price,
                   "MOP procurement and distrib." = distribution_price)
        })
        
        #---------------------------------
        
        lostInput <- reactive({
            if(input$LLIN_lost != "Other"){
                lostInput <- 0.123
            }
            else{
                lostInput <- input$lost_other
            }
        })
        
        #---------------------------------
        
        useInput <- reactive({
            if(input$not_used != "Other"){
                useInput <- usage_vect
            }
            else{
                useInput <- input$not_used_other
            }
        })
       
        #---------------------------------
        insecticide_effInput <- reactive({
            if(input$insecticide_efficacy != "Other"){
                insecticide_effInput <- insecticide_eff_vect
            }
            else{
                insecticide_effInput <- input$insecticide_other
            }
        })
        
        #---------------------------------
        wear_tearInput <- reactive({
            if(input$wear_tear != "Other"){
                wear_tearInput <- wear_tear_vect
            }
            else{
                wear_tearInput <- input$wear_tear_other
            }
        })
        
        #-------------------------------
        

    output$summary <- renderPrint({
       choice <- c(distribInput(), priceInput(), lostInput(), useInput(),
          insecticide_effInput(), wear_tearInput(), "")
       labels <- c(input$distrib, input$price, input$LLIN_lost, input$not_used, 
                   input$insecticide_efficacy,
                   input$wear_tear, input$improvement)
       
       names <- c("Cost distrib. %", "Price", "LLIN lost %","Not used %",
                  "Insecticide efficacy %", "Attrition wear & tear", "Improvement")
       
       summary <- matrix(labels, nrow = 1, ncol = 7)
       summary <- rbind(summary, choice)
       
       colnames(summary) <- names
       rownames(summary) <- c("", "")
       
       summary

    })
        #-----------------------------------
        data <- reactive({
            #distribution <- distribInput()
            b_plan[7,1] <- distribInput()
            
            
            b_plan[2,2] <- priceInput()
            
            b_plan[3,2] <- b_plan[2,2]*b_plan[1,2]
            
            b_plan[6,2] <- b_plan[5,1]*b_plan[4,2]
            
            b_plan[7,2] <- (b_plan[3,2]/0.71)*b_plan[7,1]
            
            b_plan[8,2] <- b_plan[6,2]+b_plan[7,2]
            
            b_plan[9,2] <- b_plan[9,1]*b_plan[8,2]
            
            b_plan[10,2] <- b_plan[10,1]*b_plan[9,2]
            
            b_plan[11,2] <- b_plan[11,1]*b_plan[9,2]
            
            b_plan[12,2] <- b_plan[12,1]*b_plan[9,2]
            
            b_plan[13,2] <- b_plan[16,1]*b_plan[1,2]
            
            b_plan[14,2] <- b_plan[1,1]-b_plan[13,2]
            
            
            
            
            
            b_plan[9,1] <- lostInput()
            b_plan
        })
        
        
        
        
        # b_plan[7,1] <- reactive({
        #     if(input$distrib != "Other"){
        #         switch(input$distrib,
        #                "PMI" = PMI_distrib,
        #                "GF" = GF,
        #                "AMF" = AMF)
        #         return(as.numeric(input$distrib))
        #     }
        #     else{
        #         as.numeric(input$dist_other) 
        #     }
        # })
        # #-----------------------------------
        # 
        # b_plan[2,2] <- reactive({
        #     switch(input$price,
        #            "CEO" = CEO_price,
        #            "MOP procurement" = procurement_price,
        #            "MOP procurement and distrib." = distribution_price)
        # })
        # 
        # #---------------------------------
        # 
        # b_plan[9,1] <- reactive({
        #     if(input$LLIN_lost != "Other"){
        #          lost_vect
        #     }
        #     else{
        #          input$lost_other
        #     }
        # })
        # 
        # #---------------------------------
        # 
        # b_plan[10,1] <- reactive({
        #     if(input$not_used != "Other"){
        #         usage_vect
        #     }
        #     else{
        #         input$not_used_other
        #     }
        # })
        # 
        # #---------------------------------
        # b_plan[11,1] <- reactive({
        #     if(input$insecticide_efficacy != "Other"){
        #         insecticide_eff_vect
        #     }
        #     else{
        #         input$insecticide_other
        #     }
        # })
        # 
        # #---------------------------------
        # b_plan[12,1] <- reactive({
        #     if(input$wear_tear != "Other"){
        #          wear_tear_vect
        #     }
        #     else{
        #          input$wear_tear_other
        #     }
        # })
        #  
        # b_plan[20:22,1] <- input$improvement

    # Filter data based on selections
      
    output$Bplan <- 
        renderTable({  
            df <- data()
            df$Percentage <- sprintf("%.2f", df$Percentage)
            df[2,2] <- sprintf("%.2f", df[2,2])
            return(df)}, include.rownames = TRUE, digits = 0, na = "", 
                    striped = TRUE, bordered = TRUE
                    )
        
    
}

# Create Shiny app ----
shinyApp(ui, server)

