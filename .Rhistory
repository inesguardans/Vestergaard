load("C:/Users/IGG/Dropbox/Github/Vestergaard/app.R")
shiny::runApp()
runApp()
setwd("C:/Users/IGG/Dropbox/Github/Vestergaard")
library(readxl)
setwd("C:/Users/IGG/Dropbox/Github/Vestergaard")
b_plan <- read_xlsx("B_plan_data.xlsx")
View(b_plan)
View(b_plan)
b_plan <- read_xlsx("B_plan_data.xlsx")
View(b_plan)
runApp()
runApp()
library(DT)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shinyThemes")
install.packages("shinythemes")
library(shinythemes)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(dplyr)
b_plan %>%
filter(Variable = "Market size")
b_plan %>%
filter(Variable == "Market size")
install.packages("XLConnect")
library(XLConnect)
install.packages("XLConnect")
library(XLConnect)
require(XLConnect)
library(XLConnect)
require(XLConnect)
b_plan <- read_xlsx("B_plan_data.xlsx", keepFormulas = TRUE)
library(readxl)
b_plan <- read_xlsx("B_plan_data.xlsx", keepFormulas = TRUE)
b_plan <- read_excel("B_plan_data.xlsx", keepFormulas = TRUE)
library(readxl)
library(dplyr)
b_plan <- read_excel("B_plan_data.xlsx")
b_plan[3,2]
b_plan[3,2] <- 0.75
View(b_plan)
b_plan <- read_excel("B_plan_data.xlsx")
b_plan[3,3] <- b_plan[1,3]*b_plan[2*3]
b_plan[3,3] <- b_plan[1,3]*b_plan[2,3]
b_plan[2,3] <- 4
View(b_plan)
b_plan <- read_excel("B_plan_data.xlsx")
shiny::runApp()
runApp()
data("mtcars")
dataset <- mtcars
View(dataset)
dataset[3,3] <- dataset[2,3]*dataset[1,3]
View(dataset)
dataset[2,3] <- 100
View(dataset)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data <- c(1, 3, 4, 5)
label <- c("A", "B", "C", "D")
mat <- matrix(data, label)
mat <- matrix(data, nrow = 1, ncol = 4)
colnames(mat) <- label
mat
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
bplan <- bplan %>%
replace(NA = "")
bplan <- bplan %>%
replace(NA == "")
b_plan <- b_plan %>%
replace(NA == "")
library(dplyr)
b_plan <- b_plan %>%
mutate(Percentage = replace(Percentage, NA, ""))
View(b_plan)
b_plan <- b_plan %>%
mutate(Percentage = replace(Percentage, NA, 0))
View(b_plan)
b_plan <- b_plan %>%
mutate(Percentage = replace(Percentage, Percentage == NA, 0))
View(b_plan)
b_plan <- read_excel("B_plan_data.xlsx")
raw <- read_excel("B_plan_data.xlsx")
b_plan <- raw[,-1]
rownames(b_plan) <- raw[,1]
View(raw)
View(b_plan)
raw <- read_excel("B_plan_data.xlsx")%>%
as.data.frame()
length(raw)
length(raw[,1])
length(raw[,-1])
b_plan <- b_plan %>%
remove_rownames %>% column_to_rownames(var="names")
library(dplyr)
b_plan <- b_plan %>%
remove_rownames %>% column_to_rownames(var="names")
b_plan<- read_excel("B_plan_data.xlsx")%>%
as.data.frame()
rownames(b_plan) <- b_plan$Variable
b_plan<- read_excel("B_plan_data.xlsx")%>%
as.data.frame()
rownames(b_plan) <- b_plan$Variable
bplan[1] <- NULL
b_plan[1] <- NULL
View(b_plan)
runApp()
runApp()
b_plan <- b_plan %>%
mutate(Amount = round(Amount, 0))
View(b_plan)
b_plan<- read_excel("B_plan_data.xlsx")%>%
mutate(Amount = round(Amount, 0))%>%
as.data.frame()
View(b_plan)
runApp()
runApp()
runApp()
runApp()
b_plan<- read_excel("B_plan_data.xlsx")%>%
mutate(Amount = round(Amount, 0))%>%
as.data.frame()
rownames(b_plan) <- b_plan$Variable
b_plan[1] <- NULL
View(b_plan)
b_plan<- read_excel("B_plan_data.xlsx")%>%
#mutate(Amount = round(Amount, 0))%>%
as.data.frame()
runApp()
runApp()
typeof(input$price)
typeof(b_plan[2,3])
PMI_distrib <- 0.29
typeof(PMI_distrib)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shinyApp(
ui = dashboardPage(header, sidebar, body),
server = function(input, output) {
output$mtcarsTable <- renderDataTable({
DT::datatable(datasets::mtcars,
options = list(rowCallback = JS('
function(nRow, aData, iDisplayIndex, iDisplayIndexFull) {
// Bold and green cells for conditions
if (parseFloat(aData[3]) >= 200)
$("td:eq(3)", nRow).css("font-weight", "bold");
if (parseFloat(aData[3]) >= 100)
$("td:eq(3)", nRow).css("background-color", "#9BF59B");
}')
)
)
})
}
install.packages("shinydashboard")
shinyApp(
ui = dashboardPage(header, sidebar, body),
server = function(input, output) {
output$mtcarsTable <- renderDataTable({
DT::datatable(datasets::mtcars,
options = list(rowCallback = JS('
function(nRow, aData, iDisplayIndex, iDisplayIndexFull) {
// Bold and green cells for conditions
if (parseFloat(aData[3]) >= 200)
$("td:eq(3)", nRow).css("font-weight", "bold");
if (parseFloat(aData[3]) >= 100)
$("td:eq(3)", nRow).css("background-color", "#9BF59B");
}')
)
)
})
}
runApp('trial')
install.packages("shinydashboard")
runApp('trial')
runApp('trial')
runApp()
runApp()
